package com.example.companycore.controller.tasks;

import com.example.companycore.model.dto.NoticeItem;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.layout.VBox;
import javafx.stage.DirectoryChooser;
import javafx.stage.Stage;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

/**
 * Í≥µÏßÄÏÇ¨Ìï≠ ÏÉÅÏÑ∏Î≥¥Í∏∞ Îã§Ïù¥ÏñºÎ°úÍ∑∏ Ïª®Ìä∏Î°§Îü¨
 */
public class NoticeDetailController {

    @FXML private Label titleLabel;
    @FXML private Label departmentLabel;
    @FXML private Label authorLabel;
    @FXML private Label dateLabel;
    @FXML private TextArea contentTextArea;
    @FXML private Label importantLabel;
    @FXML private VBox attachmentSection;
    @FXML private ListView<String> attachmentListView;
    @FXML private Button downloadButton;
    @FXML private Button closeButton;

    private NoticeItem noticeItem;
    private ObservableList<String> attachmentFiles = FXCollections.observableArrayList();

    @FXML
    public void initialize() {
        setupAttachmentListView();
    }

    /**
     * Ï≤®Î∂ÄÌååÏùº Î¶¨Ïä§Ìä∏Î∑∞ ÏÑ§Ï†ï
     */
    private void setupAttachmentListView() {
        attachmentListView.setItems(attachmentFiles);
        
        // Ï≤®Î∂ÄÌååÏùº ÎçîÎ∏îÌÅ¥Î¶≠ Ïãú Îã§Ïö¥Î°úÎìú
        attachmentListView.setOnMouseClicked(event -> {
            if (event.getClickCount() == 2) {
                String selectedFile = attachmentListView.getSelectionModel().getSelectedItem();
                if (selectedFile != null) {
                    downloadAttachment(selectedFile);
                }
            }
        });
    }

    /**
     * Í≥µÏßÄÏÇ¨Ìï≠ Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
     */
    public void setNoticeItem(NoticeItem notice) {
        System.out.println("üîç NoticeDetailController.setNoticeItem Ìò∏Ï∂úÎê®");
        System.out.println("  - notice: " + (notice != null ? "not null" : "null"));
        if (notice != null) {
            System.out.println("  - noticeId: " + notice.getNoticeId());
            System.out.println("  - title: " + notice.getTitle());
            System.out.println("  - department: " + notice.getDepartment());
            System.out.println("  - author: " + notice.getAuthor());
            System.out.println("  - content length: " + (notice.getContent() != null ? notice.getContent().length() : "null"));
        }
        
        this.noticeItem = notice;
        populateData();
    }

    /**
     * Îç∞Ïù¥ÌÑ∞ Ï±ÑÏö∞Í∏∞
     */
    private void populateData() {
        System.out.println("üîç populateData Ìò∏Ï∂úÎê®");
        if (noticeItem == null) {
            System.out.println("‚ùå noticeItemÏù¥ nullÏûÖÎãàÎã§.");
            return;
        }

        System.out.println("  - Ï†úÎ™©: " + noticeItem.getTitle());
        System.out.println("  - Î∂ÄÏÑú: " + noticeItem.getDepartment());
        System.out.println("  - ÏûëÏÑ±Ïûê: " + noticeItem.getAuthor());
        System.out.println("  - ÎÇ†Ïßú: " + noticeItem.getDate());
        System.out.println("  - ÎÇ¥Ïö© Í∏∏Ïù¥: " + (noticeItem.getContent() != null ? noticeItem.getContent().length() : "null"));
        System.out.println("  - Ï§ëÏöî Ïó¨Î∂Ä: " + noticeItem.isImportant());

        // UI Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä nullÏù∏ÏßÄ ÌôïÏù∏
        if (titleLabel == null) {
            System.out.println("‚ùå titleLabelÏù¥ nullÏûÖÎãàÎã§.");
            return;
        }
        if (departmentLabel == null) {
            System.out.println("‚ùå departmentLabelÏù¥ nullÏûÖÎãàÎã§.");
            return;
        }
        if (authorLabel == null) {
            System.out.println("‚ùå authorLabelÏù¥ nullÏûÖÎãàÎã§.");
            return;
        }
        if (dateLabel == null) {
            System.out.println("‚ùå dateLabelÏù¥ nullÏûÖÎãàÎã§.");
            return;
        }
        if (contentTextArea == null) {
            System.out.println("‚ùå contentTextAreaÍ∞Ä nullÏûÖÎãàÎã§.");
            return;
        }

        titleLabel.setText(noticeItem.getTitle());
        departmentLabel.setText(noticeItem.getDepartment());
        authorLabel.setText(noticeItem.getAuthor());
        dateLabel.setText(noticeItem.getDate() != null ? noticeItem.getDate().toString() : "");
        contentTextArea.setText(noticeItem.getContent());

        // Ï§ëÏöî Í≥µÏßÄÏÇ¨Ìï≠ ÌëúÏãú
        importantLabel.setVisible(noticeItem.isImportant());

        // Ï≤®Î∂ÄÌååÏùº Ï≤òÎ¶¨
        processAttachments();
        
        System.out.println("‚úÖ populateData ÏôÑÎ£å");
    }

    /**
     * Ï≤®Î∂ÄÌååÏùº Ï≤òÎ¶¨
     */
    private void processAttachments() {
        attachmentFiles.clear();
        
        if (noticeItem.hasAttachments()) {
            // Ïã§Ï†ú Ï≤®Î∂ÄÌååÏùºÏù¥ ÏûàÎäî Í≤ΩÏö∞
            if (noticeItem.getAttachmentFilename() != null && !noticeItem.getAttachmentFilename().isEmpty()) {
                String filename = noticeItem.getAttachmentFilename();
                Long attachmentSize = noticeItem.getAttachmentSize();
                
                // ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏
                System.out.println("Ï≤®Î∂ÄÌååÏùº Ï†ïÎ≥¥: " + filename + ", ÌÅ¨Í∏∞: " + attachmentSize);
                
                String fileSize;
                if (attachmentSize != null && attachmentSize > 0) {
                    fileSize = formatFileSize(attachmentSize);
                } else {
                    // ÌÅ¨Í∏∞ Ï†ïÎ≥¥Í∞Ä ÏóÜÏúºÎ©¥ Base64 ÎÇ¥Ïö©ÏóêÏÑú ÌÅ¨Í∏∞ Í≥ÑÏÇ∞
                    if (noticeItem.getAttachmentContent() != null && !noticeItem.getAttachmentContent().isEmpty()) {
                        try {
                            byte[] fileBytes = java.util.Base64.getDecoder().decode(noticeItem.getAttachmentContent());
                            fileSize = formatFileSize(fileBytes.length);
                            System.out.println("Base64ÏóêÏÑú Í≥ÑÏÇ∞Îêú ÌÅ¨Í∏∞: " + fileBytes.length + " bytes");
                        } catch (Exception e) {
                            fileSize = "ÌÅ¨Í∏∞ Ï†ïÎ≥¥ ÏóÜÏùå";
                            System.out.println("Base64 ÎîîÏΩîÎî© Ïã§Ìå®: " + e.getMessage());
                        }
                    } else {
                        fileSize = "ÌÅ¨Í∏∞ Ï†ïÎ≥¥ ÏóÜÏùå";
                    }
                }
                
                attachmentFiles.add(filename + " (" + fileSize + ")");
                attachmentSection.setVisible(true);
                downloadButton.setVisible(true);
            }
        } else {
            // ÎÇ¥Ïö©ÏóêÏÑú Ï≤®Î∂ÄÌååÏùº Ï†ïÎ≥¥ Ï∂îÏ∂ú (Í∏∞Ï°¥ Î∞©Ïãù)
            String content = noticeItem.getContent();
            if (content != null && content.contains("[Ï≤®Î∂ÄÌååÏùº]")) {
                String[] parts = content.split("\\[Ï≤®Î∂ÄÌååÏùº\\]");
                if (parts.length > 1) {
                    String attachmentInfo = parts[1];
                    String[] lines = attachmentInfo.split("\n");
                    
                    for (String line : lines) {
                        line = line.trim();
                        if (line.startsWith("- ") && line.contains(" (")) {
                            String filename = line.substring(2, line.lastIndexOf(" ("));
                            attachmentFiles.add(filename);
                        }
                    }
                    
                    if (!attachmentFiles.isEmpty()) {
                        attachmentSection.setVisible(true);
                        downloadButton.setVisible(true);
                    }
                }
            }
        }
    }
    
    /**
     * ÌååÏùº ÌÅ¨Í∏∞ Ìè¨Îß∑ÌåÖ
     */
    private String formatFileSize(long bytes) {
        if (bytes < 1024) return bytes + " B";
        if (bytes < 1024 * 1024) return String.format("%.1f KB", bytes / 1024.0);
        if (bytes < 1024 * 1024 * 1024) return String.format("%.1f MB", bytes / (1024.0 * 1024.0));
        return String.format("%.1f GB", bytes / (1024.0 * 1024.0 * 1024.0));
    }

    /**
     * Ï≤®Î∂ÄÌååÏùº Îã§Ïö¥Î°úÎìú Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
     */
    @FXML
    private void handleDownloadAttachment() {
        String selectedFile = attachmentListView.getSelectionModel().getSelectedItem();
        if (selectedFile != null) {
            // ÌååÏùºÎ™ÖÏóêÏÑú ÌÅ¨Í∏∞ Ï†ïÎ≥¥ Ï†úÍ±∞
            String filename = extractFilename(selectedFile);
            downloadAttachment(filename);
        } else {
            showAlert("ÏïåÎ¶º", "Îã§Ïö¥Î°úÎìúÌï† ÌååÏùºÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.", Alert.AlertType.WARNING);
        }
    }
    
    /**
     * ÌååÏùºÎ™ÖÏóêÏÑú ÌÅ¨Í∏∞ Ï†ïÎ≥¥ Ï†úÍ±∞
     */
    private String extractFilename(String displayText) {
        if (displayText.contains(" (")) {
            return displayText.substring(0, displayText.lastIndexOf(" ("));
        }
        return displayText;
    }

    /**
     * Ï≤®Î∂ÄÌååÏùº Îã§Ïö¥Î°úÎìú
     */
    private void downloadAttachment(String filename) {
        try {
            DirectoryChooser directoryChooser = new DirectoryChooser();
            directoryChooser.setTitle("Îã§Ïö¥Î°úÎìú ÏúÑÏπò ÏÑ†ÌÉù");
            
            Stage stage = (Stage) closeButton.getScene().getWindow();
            File selectedDirectory = directoryChooser.showDialog(stage);
            
                    if (selectedDirectory != null) {
            // Ïã§Ï†ú ÌååÏùº Îã§Ïö¥Î°úÎìú Íµ¨ÌòÑ
            downloadActualFile(selectedDirectory, filename);
            showAlert("ÏÑ±Í≥µ", "ÌååÏùºÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Îã§Ïö¥Î°úÎìúÎêòÏóàÏäµÎãàÎã§.", Alert.AlertType.INFORMATION);
        }
        } catch (Exception e) {
            showAlert("Ïò§Î•ò", "ÌååÏùº Îã§Ïö¥Î°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: " + e.getMessage(), Alert.AlertType.ERROR);
        }
    }

    /**
     * Ïã§Ï†ú ÌååÏùº Îã§Ïö¥Î°úÎìú (Base64 ÎîîÏΩîÎî©)
     */
    private void downloadActualFile(File directory, String filename) throws IOException {
        Path targetPath = Paths.get(directory.getAbsolutePath(), filename);
        
        // NoticeItemÏóêÏÑú Base64Î°ú Ïù∏ÏΩîÎî©Îêú ÌååÏùº ÎÇ¥Ïö© Í∞ÄÏ†∏Ïò§Í∏∞
        if (noticeItem != null && noticeItem.getAttachmentContent() != null && !noticeItem.getAttachmentContent().isEmpty()) {
            try {
                // Base64 ÎîîÏΩîÎî©
                byte[] fileBytes = java.util.Base64.getDecoder().decode(noticeItem.getAttachmentContent());
                Files.write(targetPath, fileBytes);
                System.out.println("ÌååÏùº Îã§Ïö¥Î°úÎìú ÏôÑÎ£å: " + filename + " (" + fileBytes.length + " bytes) - Base64 ÎÇ¥Ïö© ÏÉùÎûµ");
            } catch (Exception e) {
                System.out.println("Base64 ÎîîÏΩîÎî© Ïò§Î•ò: " + e.getMessage());
                throw new IOException("ÌååÏùº ÎÇ¥Ïö©ÏùÑ ÎîîÏΩîÎî©Ìï† Ïàò ÏóÜÏäµÎãàÎã§: " + e.getMessage());
            }
        } else {
            // ÌååÏùº ÎÇ¥Ïö©Ïù¥ ÏóÜÎäî Í≤ΩÏö∞
            throw new IOException("Ï≤®Î∂ÄÌååÏùº ÎÇ¥Ïö©Ïù¥ ÏóÜÏäµÎãàÎã§.");
        }
    }

    /**
     * Îã´Í∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
     */
    @FXML
    private void handleClose() {
        Stage stage = (Stage) closeButton.getScene().getWindow();
        stage.close();
    }

    /**
     * ÏïåÎ¶º Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÌëúÏãú
     */
    private void showAlert(String title, String content, Alert.AlertType alertType) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }
} 